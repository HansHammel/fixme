{"name":"Fixme","tagline":"Node module to scan for FIXME, TODO, HACK, OPTIMIZE, and NOTE comments within your source code, and print them to stdout.","body":"# Fixme #\r\n\r\nNode module to scan for NOTE, OPTIMIZE, TODO, HACK, XXX, FIXME, and BUG comments within your source code and print them to stdout. This is similar to the ```rake notes``` task from Rails.\r\n\r\nIt ends up giving you an output like this:\r\n\r\n![](http://i.imgur.com/OXsTtCZ.png)\r\n\r\nThe color formatting is currently done using the excellent terminal coloring library [chalk](https://www.npmjs.org/package/chalk).\r\n\r\n*Fixme currently scans your matching files line-by-line looking for annotations in the code. As such; multi-line annotation capturing is currently not supported. All annotations must be on the same line.*\r\n\r\n## Useage ##\r\n\r\nIn order to use Fixme all you need to do is install it:\r\n\r\n> npm install -g fixme\r\n\r\n*Note: There really shouldn't be much reason to globally install it...*\r\n\r\nRequire it:\r\n\r\n```javascript\r\nvar fixme = require('fixme');\r\n```\r\n\r\nAnd finally; configure it when you call it:\r\n\r\n```javascript\r\n// All values below are Fixme default values unless otherwise overridden here.\r\nfixme({\r\n  path:                 process.cwd(),\r\n  ignored_directories:  ['node_modules/**', '.git/**', '.hg/**'],\r\n  file_patterns:        ['**/*.js', 'Makefile', '**/*.sh'],\r\n  file_encoding:        'utf8',\r\n  line_length_limit:    1000\r\n});\r\n```\r\n\r\nYou should then see some nice output when this is run:\r\n\r\n```\r\n• path/to/your/directory/file.js [4 messages]:\r\n  [Line   1]  ✐ NOTE: This is here because sometimes an intermittent issue appears.\r\n  [Line   7]  ↻ OPTIMIZE: This could be reqorked to not do a O(N2) lookup.\r\n  [Line   9]  ✓ TODO from John: Add a check here to ensure these are always strings.\r\n  [Line  24]  ✄ HACK: I am doing something here that is horrible, but it works for now...\r\n  [Line  89]  ✗ XXX: Let's do this better next time? It's bad.\r\n  [Line 136]  ☠ FIXME: We sometimes get an undefined index in this array.\r\n  [Line 211]  ☢ BUG: If the user inputs \"Easter\" we always output \"Egg\", even if they wanted a \"Bunny\".\r\n```\r\n\r\n### Configure Options (In More Detail) ###\r\n\r\n  * **path:** The path to scan through for notes, defaults to process.cwd()\r\n  * **ignored_directories:** Glob patterns for directories to ignore. Passes these straight to [minimatch](https://www.npmjs.org/package/minimatch) so check there for more information on proper syntax.\r\n  * **file_patterns:** Glob patterns for files to scan. Also uses [minimatch](https://www.npmjs.org/package/minimatch).\r\n  * **file_encoding:** The encoding the files scanned will be opened as.\r\n  * **line_length_limit:** The number of max characters a line can be before Fixme gives up and doen not scan it for matches. If a line is too long, the regular expression will take an extremely long time to finish. *You have been warned!*\r\n\r\n### Using With [GulpJS](http://gulpjs.com/) ###\r\n\r\nUsing this as a GulpJS task is pretty simple, here is a very straight-forward \"notes\" task:\r\n\r\n```javascript\r\ngulp.task('notes', fixme);\r\n```\r\n\r\nThat, of course, assumes all of the defaults in Fixme are ok with you. If not, this is still pretty simple to configure and run as a Gulp task:\r\n\r\n```javascript\r\ngulp.task('notes', function () {\r\n  fixme({\r\n    path:                 process.cwd(),\r\n    ignored_directories:  ['node_modules/**', '.git/**', '.hg/**'],\r\n    file_patterns:        ['**/*.js', 'Makefile', '**/*.sh'],\r\n    file_encoding:        'utf8',\r\n    line_length_limit:    1000\r\n  });\r\n});\r\n```\r\n\r\n### Writing Comments for Use With Fixme ###\r\n\r\nA code annotation needs to follow these rules to be picked up by Fixme:\r\n\r\n  * Can be preceeded by 0 to n number of characters, this includes the comment characters // and /*\r\n  * Must have one of the words: NOTE, OPTIMIZE, TODO, HACK, XXX, FIXME, or BUG\r\n  * Can have 0 to n space characters\r\n  * Can have an author in parenthesis after the above word, and before a colon (:)\r\n  * Can have 0 to n space characters\r\n  * Must be followed by a colon (:)\r\n  * Can have 0 to n space characters\r\n  * Should have a message of 0 to n characters for the note\r\n\r\n#### Displaying Authors ####\r\n\r\nYou can have an author of a comment displayed via Fixme:\r\n\r\n```javascript\r\n// NOTE(John Postlethwait): This comment will be shown as a note, and have an author!\r\n```\r\n\r\n```shell\r\n  [Line 1]  ✐ NOTE from John Postlethwait: This comment will be shown as a note, and have an author!\r\n```\r\n\r\n#### More Examples ####\r\n\r\nTake a look at the ```test/annotation_test.js``` file, all of those comments in there are supported and expected to parse with Fixme.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}